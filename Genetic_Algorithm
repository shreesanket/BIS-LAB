import numpy as np

def target_function(x):
    return x**2 + np.random.normal(0, 0.1)

def create_population(size, bounds):
    return np.random.uniform(bounds[0], bounds[1], size)

def calculate_fitness(population):
    return np.array([target_function(ind) for ind in population])

def select_parents(population, fitness):
    fitness_sum = np.sum(fitness)
    if fitness_sum == 0:
        return np.random.choice(population, size=2)
    
    probabilities = fitness / fitness_sum
    return population[np.random.choice(range(len(population)), size=2, p=probabilities)]

def crossover(parent1, parent2, crossover_rate):
    if np.random.rand() < crossover_rate:
        return (parent1 + parent2) / 2
    return parent1

def mutate(individual, mutation_rate, bounds):
    if np.random.rand() < mutation_rate:
        mutation = np.random.uniform(-1, 1)
        individual += mutation
        return np.clip(individual, bounds[0], bounds[1])
    return individual

def replacement(old_population, new_population):
    combined_population = np.concatenate((old_population, new_population))
    combined_fitness = calculate_fitness(combined_population)
    best_indices = np.argsort(combined_fitness)[-len(old_population):]
    return combined_population[best_indices]

def genetic_algorithm(pop_size, bounds, generations, mutation_rate, crossover_rate):
    population = create_population(pop_size, bounds)

    for gen in range(generations):
        fitness = calculate_fitness(population)
        best_fitness = round(np.max(fitness), 5)
        print(f"Generation {gen + 1}: Best Fitness = {best_fitness}")

        new_population = []
        for _ in range(pop_size // 2):
            parent1, parent2 = select_parents(population, fitness)
            child1 = mutate(crossover(parent1, parent2, crossover_rate), mutation_rate, bounds)
            child2 = mutate(crossover(parent2, parent1, crossover_rate), mutation_rate, bounds)
            new_population.extend([child1, child2])
        
        population = replacement(population, new_population)

    final_fitness = calculate_fitness(population)
    best_idx = np.argmax(final_fitness)
    best_individual = int(round(population[best_idx]))
    best_fitness = round(final_fitness[best_idx], 5)
    
    print(f"Best individual: {best_individual}, Fitness: {best_fitness}")

POPULATION_SIZE = 10
GENERATION_COUNT = 50
MUTATION_RATE = 0.1
CROSSOVER_RATE = 0.7
BOUNDS = (0, 4)

genetic_algorithm(POPULATION_SIZE, BOUNDS, GENERATION_COUNT, MUTATION_RATE, CROSSOVER_RATE)

