import numpy as np
import math

# Objective Function (Optimization Problem)
# This is a sample function to optimize. Modify it as per your problem.
def objective_function(x):
    return np.sum(x**2)  # Example: Minimize the sum of squares (f(x) = sum(x^2))

# Lévy Flight Step (used to explore the solution space)
def levy_flight(Lambda, size):
    sigma_u = (math.gamma(1 + Lambda) * np.sin(math.pi * Lambda / 2) / 
               math.gamma((1 + Lambda) / 2) * np.power(Lambda, 1 / 2))
    u = np.random.normal(0, sigma_u, size)
    v = np.random.normal(0, 1, size)
    step = u / np.power(np.abs(v), 1 / Lambda)
    return step

# Cuckoo Search Algorithm
def cuckoo_search(objective_function, n_nests=25, n_iterations=1000, alpha=0.01, p_a=0.25, Lambda=1.5, dim=5):
    # Initialize nests (positions of the solutions)
    nests = np.random.uniform(-10, 10, (n_nests, dim))  # Random positions in a 10x10 space
    fitness = np.array([objective_function(nest) for nest in nests])  # Fitness of each nest

    # Find the best solution
    best_nest = nests[np.argmin(fitness)]
    best_fitness = np.min(fitness)

    for iteration in range(n_iterations):
        # Generate new solutions via Lévy flights
        new_nests = np.copy(nests)
        for i in range(n_nests):
            # Generate a new solution using Lévy flights
            step = levy_flight(Lambda, dim)
            new_nests[i] = nests[i] + alpha * step

            # Ensure the new nest is within the boundary
            new_nests[i] = np.clip(new_nests[i], -10, 10)

        # Evaluate the new solutions
        new_fitness = np.array([objective_function(nest) for nest in new_nests])

        # Abandon the worst nests and replace with new random solutions
        for i in range(n_nests):
            if new_fitness[i] < fitness[i] or np.random.rand() < p_a:
                nests[i] = new_nests[i]
                fitness[i] = new_fitness[i]

        # Update the best solution if a new better nest is found
        best_nest = nests[np.argmin(fitness)]
        best_fitness = np.min(fitness)

        # Print iteration information
        if (iteration + 1) % 100 == 0:
            print(f"Iteration {iteration+1}: Best Fitness = {best_fitness}")

    return best_nest, best_fitness

# Parameters for the algorithm
n_nests = 25  # Number of nests (population size)
n_iterations = 1000  # Number of iterations
alpha = 0.01  # Step size scaling factor
p_a = 0.25  # Probability of discovering a new nest
Lambda = 1.5  # Lévy flight exponent (controls the step distribution)
dim = 5  # Dimensionality of the problem (number of variables)

# Run the Cuckoo Search
best_nest, best_fitness = cuckoo_search(objective_function, n_nests, n_iterations, alpha, p_a, Lambda, dim)

# Output the best solution found
print("\nBest Nest (Solution):", best_nest)
print("Best Fitness:", best_fitness)

